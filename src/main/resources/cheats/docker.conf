docker {
  "!Dockerfile" {
    "!important" = "It is important to set the USER stmt in all 'Dockerfiles'. If you do not do this your processes will be running as 'root' within the container."
    "!create-user" = "RUN groupadd --system [group-name] && useradd --system -g [group-name] [user-name]"
    "!reduce-image-size" = "If we delete the file in the same layer that it's created, it won't be included in the image; ofte done for downloaded tarballs."
    "USER" = "Sets the user for all the following lines in 'Dockerfile' incl. CMD and ENTRYPOINT"
    "EXPOSE" = "Declare ports accessible to the host and other containers"
  }
  "!glossary" {
    "entrypoint" = "Docker has a default entrypoint which is \"/bin/sh -c\" but does not have a default command. The ENTRYPOINT defines the process that runs as PID 1 in the container, and the CMD adds options to it."
    "command" = "When you run \"docker run -i -t ubuntu bash\" the entrypoint is the default \"/bin/sh -c\" and the command is \"bash\". The command is run via the entrypoint. i.e., the actual thing that gets executed is \"/bin/sh -c bash\""
  }
  ps {
    "-a" = "show all"
    "-q --quiet" = "only display numeric IDs"
    "-l --latest" = "Show the latest created container (includes all states)"
  }
  logs {
    "!example" = "logs <name/id> //Shows stdout & stderr"
    "-f --follow" = "tail"
    "-t" = "Show timestamps"
  }
  run {
    "!usage" = "docker run <image> [COMMAND] [ARG...] //create container and run it"
    "!example1" = "docker run -d --name wpdb -e MYSQL_ROOT_PASSWORD=ch2demo mysql:5 "
    "!example2" = "docker run -d --name wp3 --link wpdb:mysql -p 80 -v /var/lock/apache2/ -v /var/run/apache2/ --read-only wordpress:4"
    "!example3" = "docker run --entrypoint="cat" wordpress:4 /entrypoint.sh"
    "!example4" = "docker run -d --name bmweb -v ~/example-docs:/usr/local/apache2/htdocs -p 80:80 httpd:latest"
    "!example5" = "docker run -d -v $(pwd)/secret-file:/secret-file:ro myimage"
    "--name <name>" = "Name of the container"
    "-d --detach" = "Run container in background and print container ID"
    "-i --interactive" = "Keep STDIN open even if not attached"
    "-t --tty" = "Allocate a pseudo-TTY"
    "--rm" = "automatically remove the container when it exits"
    "-p --publish" = "publish a container's port(s) to the host"
    "-v --volume" = "Bind mount a volume (add ':ro' for read-only)"
    "--link <name/id>[:alias]" = "Add link to another container - The link alias will be added to the DNS override (/etc/hosts) list of the new container with the IP address of the target container. Ports exposed by the target container can be accessed."
    "-e --env" = "set environment variables"
    "--env-file" = "read in a file of environment variables"
    "--read-only" = "Mount the container's root filesystem as read only"
    "--network" = "Connect a container to a network (host|none)"
    "--cidfile <path-to-file>" = "write container id into file"
    "--restart" = "Restart policy to apply when a container exits [no|on-failure[:max-retries]|unless-stopped|always] (default no)"
    "--entrypoint" = "Overwrite the default ENTRYPOINT of the image"
    "--pid host" = "Use the host's pid namespace"
    "--expose" = "Exposes a port of the container without publishing the port to the host network"
    "--log-driver" = "Where to log to, e.g. 'json-file' (default), 'syslog', 'journald', 'none', ..."
  }
  exec {
    "!usage" = "docker exec <name/id> <cmd>"
    "!example" = "docker exec lamp-test ps"
    "!example" = "docker exec -ti lamp-test /bin/bash"
  }
  inspect {
    "!usage" = "docker inspect <name/id|image>"
    "!example" = "docker inspect --format \"{{.State.Running}}\" myContainer"
    "!example2" = "docker inspect --format \"{{.NetworkSettings.IPAddress}}\" myContainer"
  }
  rm {
    "!usage" = "docker rm <name/id>"
    "!example1" = "docker rm -vf one two"
    "!example2" = "docker rm -v $(docker ps -lq) #remove last created container"
    "!example3" = "docker rm $(docker ps -aq) #remove all containers"
    "-v" = "remove volume"
    "-f" = "force"
  }
  images {
   "-a" = "Show all images (default hides intermediate images)"
   "--no-trunc" = "Don't truncate output"
   "-q" = "Only return image IDs (useful as input to other commands such as 'docker rmi')"
  }
  rmi = "Remove one or more images"
  port {
    "!desc" = "List port mappings or a specific mapping for the container"
    "!example" = "docker port <name/id> 80  #Shows which port on the host is forwards to port 80 in the container"
  }
  diff =  "Shows all the file-system changes that have been made inside a container"
  history = "You can examine all the layers in an image using the docker history command"
  network {
    "ls" = "list current networks"
  }
  top = "Display the running processes of a container"
  build {
    "!1" = "The build context is the set of files and dirs that can be referenced from ADD or COPY instructions."
    "!2" = "All files from the build context will be sent to the Docker daemon (as a tarball) as part of the build process."
    "!3" = "One can use a .dockerignore file (supports wildcards * and ?) to remove unneeded files from the build context."
    "!4" = "You have to either explicitly docker pull all ancestor images or delete them in order to force the 'build command' \n\t\tto download the latest versions"
    "!example" = "docker build --no-cache -t <image-name>:<tag-name>"
    "--no-cache" = "Do not use cache when building the image; RUN instructions that do not have the same result across \n\t\tinvocations will still be cached, e.g. 'apt-get update'"
    "-t, --tag" = "Name and optionally a tag in the 'name:tag' format"
  }
  stop {
    "!example1" = "docker stop $(docker ps -lq) #stop last created container"
    "!example2" = "docker stop $(docker ps -q) #stop all containers"
  }
  kill {
    "!desc" = "Sends a SIGKILL to the main process (PID 1) of a container"
    "-s" = "Specify signal to be sent"
  }
  stats {
    "!desc" = "Display a live stream of container(s) resource usage statistics"
    "!example" = "docker stats $(docker inspect -f {{.Name}} $(docker ps -q)) # stats on all running containers"
  }
}
