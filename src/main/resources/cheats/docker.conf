docker {
  glossary {
    "entrypoint" = "Docker has a default entrypoint which is \"/bin/sh -c\" but does not have a default command"
    "command" = "When you run \"docker run -i -t ubuntu bash\" the entrypoint is the default \"/bin/sh -c\" and the command is \"bash\". The command is run via the entrypoint. i.e., the actual thing that gets executed is \"/bin/sh -c bash\""
  }
  ps {
    "-a" = "show all"
    "-q --quiet" = "only display numeric IDs"
    "-l --latest" = "Show the latest created container (includes all states)"
  }
  logs {
    "!example" = "logs <name/id> //Shows stdout & stderr"
    "-f --follow" = "tail"
  }
  run {
    "!usage" = "docker run <image> [COMMAND] [ARG...] //create container and run it"
    "!example1" = "docker run -d --name wpdb -e MYSQL_ROOT_PASSWORD=ch2demo mysql:5 "
    "!example2" = "docker run -d --name wp3 --link wpdb:mysql -p 80 -v /var/lock/apache2/ -v /var/run/apache2/ --read-only wordpress:4"
    "!example3" = "docker run --entrypoint="cat" wordpress:4 /entrypoint.sh"
    "!example4" = "docker run -d --name bmweb -v ~/example-docs:/usr/local/apache2/htdocs -p 80:80 httpd:latest"
    "--name <name>" = "Name of the container"
    "-d --detach" = "Run container in background and print container ID"
    "-i --interactive" = "Keep STDIN open even if not attached"
    "-t --tty" = "Allocate a pseudo-TTY"
    "--rm" = "automatically remove the container when it exits"
    "-p --publish" = "publish a container's port(s) to the host"
    "-v --volume" = "Bind mount a volume"
    "--link <name/id>[:alias]" = "Add link to another container - The link alias will be added to the DNS override (/etc/hosts) list of the new container with the IP address of the target container. Ports exposed by the target container can be accessed. Remember that containers maintain IP address leases only when theyâ€™re running. So if a container is stopped or restarted, it will lose its IP lease and any linked containers will have stale data."
    "-e --env" = "set environment variables"
    "--env-file" = "read in a file of environment variables"
    "--read-only" = "Mount the container's root filesystem as read only"
    "--network" = "Connect a container to a network"
    "--cidfile <path-to-file>" = "write container id into file"
    "--restart" = "Restart policy to apply when a container exits [no|on-failure[:max-retries]|unless-stopped|always] (default no)"
    "--entrypoint" = "Overwrite the default ENTRYPOINT of the image"
    "--pid host" = "Use the host's pid namespace"
    "--expose" = "Exposes a port of the container without publishing the port to the host network"
  }
  exec {
    "!usage" = "docker exec <name/id> <cmd>"
    "!example" = "docker exec lamp-test ps"
    "!example" = "docker exec -ti lamp-test /bin/bash"
  }
  inspect {
    "!usage" = "docker inspect <name/id|image>"
    "!example" = "docker inspect --format \"{{.State.Running}}\" wp"
  }
  rm {
    "!usage" = "docker rm <name/id>"
    "!example" = "docker rm -vf one two"
    "-v" = "remove volume"
    "-f" = "force"
  }
  images {
   "-a" = "Show all images (default hides intermediate images)"
  }
  rmi = "Remove one or more images"
  port = "List port mappings or a specific mapping for the container"
  diff =  "Shows all the file-system changes that have been made inside a container"
  history = "You can examine all the layers in an image using the docker history command"
}
