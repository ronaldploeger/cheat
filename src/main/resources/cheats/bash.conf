bash {
  "!url" = "http://openbook.rheinwerk-verlag.de/shell_programmierung/"
  vars {
    "$0" = Script name
    "$$" = Prozessnummer
    "$?" = Beendigungsstatus des zuletzt ausgeführten Kommandos
    "$1 - $n" = Argumente aus der Kommandozeile
    "$*" = Alle Argumente aus der Kommandozeile in einer Zeichenkette
    "$@" = Alle Argumente aus der Kommandozeile als einzelne Zeichenketten (Array von Zeichenketten)
    "$#" = Anzahl aller Argumente in der Kommandozeile
    OLDPWD = Der Wert ist das zuvor besuchte Arbeitsverzeichnis - wird vom Kommando cd gesetzt
    PWD = Aktuelles Arbeitsverzeichnis
    RANDOM = Pseudo-Zufallszahl zwischen 0 bis 32767
  }
  cmd {
    "!Uebersicht" = "http://openbook.rheinwerk-verlag.de/shell_programmierung/shell_016_000.htm#RxxKap016000040050021F03F177"
    ";" = "ls myDir ; uname ; ... // execute multiple commands one after the other"
    "&&" = "ls myDir && uname && ... // execute multiple commands as long as previous command succeeded"
    "||" = "ls myDir || uname // execute command if previous command failed"
    misc = {
      rsync = "http://openbook.rheinwerk-verlag.de/shell_programmierung/shell_016_011.htm#t2t314"
      bc = Taschenrechner
      history = "listet zuletzt eingegebenen Befehle / !123 führt den mit history Befehl 123 noch einmal aus"
      "CTRL-R" = "CTRL-R [anfang befehlname] (reverse search) sucht in der history nach dem Befehl"
      which =  Durchsucht PATH
      whereis = Durchsucht Standardverzeichnisse
      locate = "locate bin/zip       //find files starting with 'zip' in a directory ending in 'bin'"
      du {
        "!example1" = "du -sh * | sort -h"
        "!info" = "disk usage"
        options {
          "-s" = "summarize"
          "-h" = "human readable"
        }
      }
      df {
        "-T" = "Show file system type"
      }
      id = displays info about your identity
      ssh {
        "!example1" = "ssh -D 15000 [host] // enable dynamic port forwarding - ssh acts as a SOCKS proxy"
        "!example2" = "./jvisualvm -J-DsocksProxyHost=localhost -J-DsocksProxyPort=15000 - let visualvm use the local SOCKS proxy"
        "!example3" = "'/etc/ssh/sshd.conf' needs: 'AllowTcpForwarding yes'"
        "-Y" = Enables trusted X11 forwarding
        "-C" = Compression of all data
        "-D [port]" = "Dynamic Port Forwarding -  ssh acts as a SOCKS proxy"
      }
      crontab {
      "-e" = edit cron jobs vi-style
      "-t" = list all cron jobs
      }
      "zip" = "zip -r foo.zip foo //r=recursion"
      "unzip" = "unzip -l foo.zip //l=list"
      "column" {
        "!example"= "less /etc/passwd | column -t -s :"
        "-t" = "Create a table.  Columns are delimited with whitespace by default, or use -s option"
        "-s" = "Specify a set of characters to be used to delimit columns for the -t option"
      }
      tr {
        "!example" = "echo hallo | tr '[a-z]' '[A-Z]'  // tr ersetzt einzelne Zeichen oder Zeichenbereiche"
        "-d" = "tr -d x        // tr -d löscht einzelne Zeichen oder Zeichenbereiche"
      }
      sort  {
        "!example1" = "sort myfile | uniq      // Sortieren und redundante Datensätze entfernen"
        "!example2" = "ps aux | sort -nrk 3 | head -n 5 // Sort Processes by CPU Usage"
        "-n" = numeric sort
        "-r" = reverse sort
        "-k KEYDEF" = "sort via a key - KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a field number and C a character position  in the field; both are origin 1, and the stop position defaults to the line's end"
      }
      uniq {
        "!example"= "sort myfile | uniq      // Sortieren und redundante Datensätze entfernen"
        "-c" = "prefix lines by the number of occurrences"
      }
      alias = "alias sucs='sort | uniq -c | sort -n'"
      watch = {
        "-n" = "interval in seconds; default is 2"
      }
      xargs {
        "!desc" = "Pass the output of a command to another command as an argument (at the end)."
        "!example1" = "find. -name *.png -type f -print | xargs tar -cvzf images.tar.gz"
        "!example2" = "cat urls.txt | xargs wget"
        "!example3" = "ls /etc/*.conf | xargs -I cp {} /tmp/conf"
        "-I" = "Replace  occurrences  of {}"
      }
    }
    file {
      "chmod" = "chmod u+x,go=rx myFile.txt"
      "chown" = "chown [owner][:[group]] file..."
      md5sum = md5 summe
      diff = "'diff file1.txt file2.txt': Vergleicht den Inhalt von zwei Dateien"
      nl = Mit nl geben Sie die Zeilen einer Datei mit deren Nummer auf dem Bildschirm aus
      sort = Ohne Angabe einer Option sortiert sort eine Datei zeilenweise in alphabetischer Reihenfolge
      tr = "'tr str1 str2 file': Mit tr können Zeichen durch andere Zeichen ersetzt werden"
      uniq = "Doppelt vorhandene Zeilen löschen. Voraussetzung ist, dass die Datei sortiert ist und die doppelten Zeilen direkt hintereinander folgen"
      wc = {
        "!" = "Mit wc können Sie die Zeichen, Wörter und/oder Zeilen einer Datei zählen"
        "-l" = lines
        "-w" = words
        "-c" = bytes
        "-m" = characters
        }
      cat = cat reads files and copies them to stdout
    }
    dir {
      "basename" = "'basename path [Suffix]': Dateinamen ohne Pfad ermitteln - optional Dateiendung entfernen, e.g. 'basename $HOME/meinText.txt .txt'"
      "dirname" = "'dirname path': Pfad ohne Dateinamen ermitteln"
      pushd = "'pushd [dir-name]': Pushes the current working directory on top of directory stack. If path is omitted, the path at the top of the directory stack is used, which has the effect of toggling between two directories."
      popd = Returns to the path at the top of the directory stack
      dirs = Shows directory stack (modified by pushd and popd)
    }
  }
  redirection {
    ">" = "myCommand > myFile.txt     // Redirecting stdout to file"
    ">>" = "myCommand >> myFile.txt   // Append stdout to file"
    "2>" = "myCommand 2> /dev/null    // Redirecting stderr to /dev/null"
    "&>" = "myCommand &> myFile.txt   // Redirecting stdout and stderr to file"
  }
  permissions {
    "!1" = The default umask value is 0022
    "!2" = Default permission for a directory is 0777
    "!3" = For files the permissions are 0666 from which the default umask value 0022 is deducted to get the newly created files or directory permission
    "4" = "r=read"
    "2" = "w=write"
    "1" = "x=execute - x for directories means: permitted to enter into that directory"
    "!setuid bit" = "4000: when applied to an executable file, it sets the effective user ID from that of the user actually running the program to that of the program's owner"
    "!setgid bit" = "2000: when is set on a directory, newly created files in the directory will be given the group ownership of the directory rather the group ownership of the file's creator"
    "!sticky bit" = "1000: ignored on files - if applied to a directory, it prevents users from deleting or renaming files unless the user is either the owner of the directory, the owner of the file, or root"
    "u" = user
    "g" = group
    "o" = other
    "a" = all
    "u+x" = add permission
    "u-x" = remove permission
    "ug=rw" = set permission
  }
}
